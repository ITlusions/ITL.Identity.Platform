name: Build and Deploy Documentation

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/**'
    tags:
      - "v*"
    paths: 
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'charts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'charts/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: itlusions/identity-docs

jobs:
  # Test and validate documentation
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test MkDocs build
      run: |
        mkdocs build --strict

    - name: Check links (if linkchecker available)
      run: |
        pip install linkchecker || true
        if command -v linkchecker &> /dev/null; then
          mkdocs serve &
          sleep 5
          linkchecker http://127.0.0.1:8000 --check-extern || true
          pkill -f mkdocs
        fi

  # Lint Helm chart
  helm-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm chart
      run: |
        helm lint charts/identity-docs --strict

    - name: Validate Helm templates (disable schema validation)
      run: |
        helm template identity-docs charts/identity-docs \
          --validate=false \
          --dry-run > /dev/null

    - name: Generate manifests without validation
      run: |
        helm template identity-docs charts/identity-docs \
          --validate=false > manifests-test.yaml

    - name: Validate Kubernetes manifests with kubeval
      run: |
        # Install kubeval for validation
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        # Validate with missing schemas ignored and skip Traefik CRDs
        kubeval manifests-test.yaml \
          --ignore-missing-schemas \
          --skip-kinds IngressRoute,Middleware,ServiceMonitor

  # Build and push Docker image
  build:
    needs: [test, helm-lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-main-tag: ${{ steps.meta.outputs.tags }} # Will use the first tag for scanning

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          latest=auto

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ startsWith(github.ref, 'refs/tags/v') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build documentation site
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        mkdocs build

    - name: Upload documentation artifacts
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: identity-docs-site
        path: site/
        if-no-files-found: error
        retention-days: 30
        overwrite: true

    - name: Upload Helm chart artifacts
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: identity-docs-helm
        path: charts/identity-docs/
        if-no-files-found: error
        retention-days: 30
        overwrite: true

  # Security scan - separate job to run after image is pushed
  security-scan:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for image propagation
      run: |
        echo "Waiting for image to be available in registry..."
        sleep 30

    - name: Determine scan target
      id: scan-target
      run: |
        # Try multiple tag formats to find the image
        POSSIBLE_TAGS=(
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        )
        
        echo "Checking available tags in registry..."
        curl -u "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" \
             "https://ghcr.io/v2/${{ env.IMAGE_NAME }}/tags/list" | jq '.' || echo "Failed to list tags"
        
        SCAN_IMAGE=""
        for tag in "${POSSIBLE_TAGS[@]}"; do
          echo "Checking if $tag exists..."
          if docker manifest inspect "$tag" > /dev/null 2>&1; then
            SCAN_IMAGE="$tag"
            echo "Found working tag: $tag"
            break
          fi
        done
        
        if [[ -z "$SCAN_IMAGE" ]]; then
          echo "No accessible image found. Using first tag from metadata."
          SCAN_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
        fi
        
        echo "scan-image=${SCAN_IMAGE}" >> $GITHUB_OUTPUT
        echo "Final scan target: ${SCAN_IMAGE}"

    - name: Verify image exists (with fallback)
      id: verify-image
      continue-on-error: true
      run: |
        echo "Verifying image: ${{ steps.scan-target.outputs.scan-image }}"
        
        if docker manifest inspect "${{ steps.scan-target.outputs.scan-image }}"; then
          echo "Image verification successful"
          echo "image-verified=true" >> $GITHUB_OUTPUT
        else
          echo "Image verification failed"
          echo "image-verified=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      if: steps.verify-image.outputs.image-verified == 'true'
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.scan-target.outputs.scan-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        skip-files: '/var/lib/dpkg/status'
        skip-dirs: '/tmp,/var/cache'
        timeout: '10m'

    - name: Handle scan skip
      if: steps.verify-image.outputs.image-verified != 'true'
      run: |
        echo "Skipping security scan - image not verified"
        echo "This may happen if:"
        echo "1. The image push is still in progress"
        echo "2. There's a delay in registry synchronization"
        echo "3. Authentication issues with the registry"
        echo ""
        echo "The deployment will continue, but security scan results won't be available."

    - name: Check scan results
      run: |
        if [[ -f "trivy-results.sarif" ]]; then
          echo "Security scan completed successfully"
          echo "scan-success=true" >> $GITHUB_OUTPUT
        else
          echo "Security scan failed or produced no results"
          echo "scan-success=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  # Package Helm chart
  # package-helm:
  #   needs: [helm-lint]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Set up Helm
  #     uses: azure/setup-helm@v3
  #     with:
  #       version: '3.12.0'

  #   - name: Package Helm chart
  #     run: |
  #       helm package charts/identity-docs --destination ./helm-packages

  #   - name: Upload Helm package
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: helm-chart
  #       path: helm-packages/*.tgz
  #      retention-days: 30

  # Deploy only for version tags
  deploy:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Generate production manifests
      run: |
        helm template identity-docs charts/identity-docs \
          --set image.tag=${{ github.ref_name }} \
          --set ingress.host=docs.itlusions.com \
          --validate=false > manifests-production.yaml

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "Version: ${{ github.ref_name }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        # Add your production deployment logic here
        # kubectl apply -f manifests-production.yaml or ArgoCD sync

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build documentation site
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        mkdocs build

    - name: Create release artifacts
      run: |
        # Create release package directory
        mkdir -p release-artifacts
        
        # Create documentation archive
        tar -czf release-artifacts/identity-docs-site-${{ github.ref_name }}.tar.gz -C site .
        
        # Package Helm chart
        helm package charts/identity-docs --destination release-artifacts --version ${{ github.ref_name }}

    - name: Upload Artifacts to Existing Release
      run: |
        # Upload artifacts to the existing release
        echo "Uploading artifacts to existing release ${{ github.ref_name }}..."
        
        # Check if release exists
        if gh release view "${{ github.ref_name }}" >/dev/null 2>&1; then
          echo "✅ Release ${{ github.ref_name }} exists"
          
          # Upload all artifacts to the existing release
          for file in release-artifacts/*; do
            echo "📦 Uploading: $(basename "$file")"
            gh release upload "${{ github.ref_name }}" "$file" --clobber
          done
          
          echo "✅ All artifacts uploaded successfully"
        else
          echo "❌ Release ${{ github.ref_name }} does not exist"
          echo "Please create the release manually first, then re-run the workflow"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-teams:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Microsoft Teams
      uses: skitionek/notify-microsoft-teams@v1
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
        job_status: ${{ needs.deploy.result }}
        message: |
          Deployment status for identity-docs:
          - Version: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Actor: ${{ github.actor }}
          - Status: ${{ needs.deploy.result }}
          - Workflow: ${{ github.workflow }}